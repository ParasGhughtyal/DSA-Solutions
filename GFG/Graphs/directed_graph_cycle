class Solution {
  public:
  
    bool DetectCycle(int node, vector<bool>& visited, vector<bool>& path, vector<vector<int>>& adj)
    {
        visited[node] = 1;
        path[node] = 1;
        
        for(int i=0; i<adj[node].size(); i++)
        {
            if(path[adj[node][i]])
            return 1;
            
            if(!visited[adj[node][i]] && DetectCycle(adj[node][i], visited, path, adj))
            return 1;
        }
        
        path[node] = 0;
        
        return 0;
    }
    
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
        
        vector<bool> visited(V, 0), path(V, 0);
        
        vector<vector<int>> adj(V);
         
        for(auto &edge : edges)
        adj[edge[0]].push_back(edge[1]); 
    
        
        for(int i=0; i<V; i++)
        {
            if(!visited[i] && DetectCycle(i, visited, path, adj))
            return 1;
        }
        
        return 0;
    }
};
